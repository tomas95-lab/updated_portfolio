---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Tech",
    label: "tech",
    url: "/#tech",
  },
  {
    title: "CV",
    label: "cv",
    url: "/cv.pdf",
  },
  {
    title: "Experience",
    label: "experience",
    url: "/#experiencia",
  },
  {
    title: "Projects",
    label: "projects",
    url: "/#proyectos",
  },
  {
    title: "About me",
    label: "about-me",
    url: "/#sobre-mi",
  },
  {
    title: "Contact",
    label: "contact",
    url: "mailto:tomasruiz.dev@gmail.com",
  },
]
---

<header class="fixed top-0 z-50 flex items-center justify-center w-full mx-auto pt-4 px-4">
  <nav id="header-nav" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300">
    {
      navItems.map((link) => (
        <a
          class="relative block px-3 py-2 mx-1 transition-all duration-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-950/50 rounded-lg group"
          aria-label={link.label}
          href={link.url}
        >
          <span class="relative z-10">{link.title}</span>
          <div class="absolute inset-0 bg-gradient-to-r from-blue-500/0 via-blue-500/10 to-blue-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg"></div>
        </a>
      ))
    }
    <div class="ml-2 pl-2 border-l border-gray-200 dark:border-gray-700">
      <ThemeToggle />
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") === entry.target.id) {
              item.classList.add("text-blue-600", "dark:text-blue-400", "bg-blue-50", "dark:bg-blue-950/50")
            } else {
              item.classList.remove("text-blue-600", "dark:text-blue-400", "bg-blue-50", "dark:bg-blue-950/50")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  #header-nav {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  nav {
    animation: nav-blur linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-blur {
    0% {
      @apply bg-white/60 dark:bg-gray-900/60 shadow-sm;
    }
    to {
      @apply bg-white/90 dark:bg-gray-900/90 shadow-xl backdrop-blur-xl;
    }
  }
</style>